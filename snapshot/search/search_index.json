{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#what-is-it","title":"What is it?","text":"<p>...</p> <p> </p>"},{"location":"developer-guide/contribution.html","title":"Contribution","text":"<p>There are several ways in which you may contribute to this project.</p> <ul> <li>File issues</li> <li>Submit a pull requests</li> </ul>"},{"location":"developer-guide/contribution.html#found-a-bug-or-missing-feature","title":"Found a bug or missing feature?","text":"<p>Please file an issue in our issue tracking system.</p>"},{"location":"developer-guide/contribution.html#submit-a-pull-request","title":"Submit a Pull Request","text":"<p>If you found a solution to an open issue and implemented it, we would be happy to add your contribution in the code base. For doing so, please create a pull request. Prior to that, please make sure you:</p> <ul> <li>rebase against the <code>develop</code> branch</li> <li>stick to project coding conventions</li> <li>added test cases for the problem you are solving</li> <li>added docs, describing the change</li> <li>generally comply with codacy report</li> </ul>"},{"location":"developer-guide/project-setup.html","title":"Project Setup","text":"<p>If you are interested in developing and building the project please follow the following instruction.</p>"},{"location":"developer-guide/project-setup.html#version-control","title":"Version control","text":"<p>To get sources of the project, please execute:</p> <pre><code>git clone https://github.com/holunda-io/axon-avro.git\ncd axon-avro\n</code></pre> <p>We are using gitflow in our git SCM. That means that you should start from <code>develop</code> branch, create a <code>feature/&lt;name&gt;</code> out of it and once it is completed create a pull request containing it. Please squash your commits before submitting and use semantic commit messages, if possible.</p>"},{"location":"developer-guide/project-setup.html#project-build","title":"Project Build","text":"<p>Perform the following steps to get a development setup up and running.</p> <pre><code>./mvnw clean install\n</code></pre>"},{"location":"developer-guide/project-setup.html#integration-tests","title":"Integration Tests","text":"<p>By default, the build command will ignore the run of <code>failsafe</code> Maven plugin executing the integration tests (usual JUnit tests with class names ending with ITest). In order to run integration tests, please call from your command line:</p> <pre><code>./mvnw integration-test failsafe:verify -Pitest\n</code></pre>"},{"location":"developer-guide/project-setup.html#build-documentation","title":"Build Documentation","text":"<p>We are using MkDocs for generation of a static site documentation and rely on Markdown as much as possible. MkDocs is written in Python 3 and needs to be installed on your machine. For the installation please run the following command from your command line:</p> <pre><code>python3 -m pip install --upgrade pip\npython3 -m pip install -r ./docs/requirements.txt\n</code></pre> <p>For creation of documentation, please run:</p> <pre><code>mkdocs build\n</code></pre> <p>The docs are generated into <code>site</code> directory.</p> <p>Note</p> <p>If you want to develop your docs in 'live' mode, run <code>mkdocs serve</code> and access the http://localhost:8000/axon-avro/ from your browser.</p>"},{"location":"developer-guide/project-setup.html#continuous-integration","title":"Continuous Integration","text":"<p>Travis CI is building all branches on commit hook. In addition, a private-hosted Jenkins CI is used to build the releases.</p>"},{"location":"developer-guide/project-setup.html#release-management","title":"Release Management","text":"<p>Release management has been set up for use of Sonatype Nexus (= Maven Central)</p>"},{"location":"developer-guide/project-setup.html#what-modules-get-deployed-to-repository","title":"What modules get deployed to repository","text":"<p>Every module is enabled by default. If you want to change this, please provide the property</p> <pre><code>&lt;maven.deploy.skip&gt;true&lt;/maven.deploy.skip&gt;\n</code></pre> <p>inside the corresponding <code>pom.xml</code>. Currently, all examples are EXCLUDED from publication into Maven Central.</p>"},{"location":"developer-guide/project-setup.html#trigger-new-release","title":"Trigger new release","text":"<p>Warning</p> <p>This operation requires special permissions.</p> <p>We use gitflow for development (see A successful git branching model for more details). You could use gitflow with native git commands, but then you would have to change the versions in the poms manually. Therefore, we use the mvn gitflow plugin, which handles this and other things nicely.</p> <p>You can build a release with:</p> <pre><code>./mvnw gitflow:release-start\n./mvnw gitflow:release-finish\n</code></pre> <p>This will update the versions in the <code>pom.xml</code> s accordingly and push the release tag to the <code>master</code> branch and update the <code>develop</code> branch for the new development version.</p>"},{"location":"developer-guide/project-setup.html#trigger-a-deploy","title":"Trigger a deploy","text":"<p>Warning</p> <p>This operation requires special permissions.</p> <p>Currently, CI allows for deployment of artifacts to Maven Central and is executed using github actions. This means, that a push to <code>master</code> branch will start the corresponding build job, and if successful the artifacts will get into <code>Staging Repositories</code> of OSS Sonatype without manual intervention.</p>"},{"location":"developer-guide/project-setup.html#run-deploy-from-local-machine","title":"Run deploy from local machine","text":"<p>Warning</p> <p>This operation requires special permissions.</p> <p>If you still want to execute the deployment from your local machine, you need to have GPG keys at place and to execute the following command on the <code>master</code> branch:</p> <pre><code>export GPG_KEYNAME=\"&lt;keyname&gt;\"\nexport GPG_PASSPHRASE=\"&lt;secret&gt;\"\n./mvnw clean deploy -B -DskipTests -DskipExamples -Prelease -Dgpg.keyname=\"$GPG_KEYNAME\" -Dgpg.passphrase=\"$GPG_PASSPHRASE\"\n</code></pre>"},{"location":"developer-guide/project-setup.html#release-to-public-repositories","title":"Release to public repositories","text":"<p>Warning</p> <p>This operation requires special permissions.</p> <p>The deployment job will publish the artifacts to Nexus OSS staging repositories. Currently, all snapshots get into OSS Sonatype Snapshot repository and all releases to Maven Central automatically.</p>"},{"location":"reference/index.html","title":"How to use","text":"<p>If you are using Spring Boot, please add the following dependency to your Maven pom:</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;io.holixon.axon.avro&lt;/groupId&gt;\n  &lt;artifactId&gt;axon-avro-serializer-spring-autoconfigure&lt;/artifactId&gt;\n  &lt;version&gt;${axon-avro.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>To activate the serializer please add the following to your configuration:</p> <pre><code>@Configuration\n@EnableAxonAvroSerializer\nclass AvroSerializerConfiguration {\n\n  @Bean\n  @Primary\n  fun defaultSerializer(): Serializer = JacksonSerializer.builder().build()\n\n  @Bean\n  @Qualifier(\"eventSerializer\")\n  fun eventSerializer(builder: AvroSerializer.Builder): Serializer = builder.build()\n\n  @Bean\n  @Qualifier(\"messageSerializer\")\n  fun messageSerializer(builder: AvroSerializer.Builder): Serializer = builder.build()\n\n  @Bean\n  fun schemaResolver() = BankAccountSchemas.schemaResolver\n\n}\n</code></pre>"},{"location":"reference/disk_usage.html","title":"Disk Usage","text":"<p>If your application is using Event Sourcing as persistence strategy, the total disk space usage of your event store and the serialization  speed might be an interesting parameters. Assuming that you are using some event store technology (Axon Server or any other Event Store of your choice),  this values depends on the serialization format. Currently, Axon Framework supports the following serialization formats: Java Binary, JSON via Jackson,  CBOR via Jackson and XML via XStream. If you are planing to use this extension, you are extending this list by Avro Single Object Encoded.</p> <p>In order to use Avro Encoding, you have to rely on either KotlinX Serialization based on avro4k or on Avro Java library using a generator creating you classes from you Avro schema which are subclassing <code>SpecificRecordBase</code>.</p> <p>In this section, we publish results we conducted during comparison of the formats above. Since Java Binary serialization should not be used in any productive systems due to security considerations, we excluded it from the test and conducted comparison on XML, JSON, CBOR and Avro.</p>"},{"location":"reference/disk_usage.html#test-setup","title":"Test setup","text":"<ul> <li>Created a small banking application, allowing to create account and deposit and withdraw money. It consists of three commands, one aggregate,   three events and a projection.</li> <li>The application has an API to batch creation of accounts and executing operations on them</li> <li>For every account, we executed money transfer operations in pairs (withdraws, disposals)</li> <li>Results in 2 * M + 1 events per account</li> <li>Running with N=10 accounts, M=100 operation pairs, resulting in 10 * 201 = 2010 events per run</li> <li>The total test was to execute 5 runs resulting in 10050 events in the Axon Server</li> <li>For Axon Server we used a docker-version version <code>axoniq/axonserver:2023.2.6-jdk-17</code> with small event segment files 977kb (1000000 bytes)</li> <li>The test application and Axon Server were running on the same machine</li> <li>Measured time for each run (The test was executed on Ubuntu 22.04.4 LTS running on a Lenovo P1 with Intel\u00ae Core\u2122 i7-8850H CPU @ 2.60GHz \u00d7 12, 32,0 GiB, SSD M.2 PCIe NVMe)</li> <li>Checked file system and calculate storage requirements</li> <li>We intentionally used a special type (<code>Money</code>) to simulate a slightly more complex scenario than just plain events with native types supported by any format</li> </ul>"},{"location":"reference/disk_usage.html#test-results","title":"Test results","text":"Format Average run (ms) Time Factor Average Event size (bytes) Size Factor Notes XStream 40381 1.588 1340 4.253 No additional configuration. Jackson JSON 25456 1.001 355 1.227 Custom Object Mapper settings for Money. Jackson CBOR 25423 1.000 344 1.092 Custom Object Mapper settings for Money. Avro KotlinX 82162 3.232 315 1.000 Custom type conversions for Money. Avro Java 136087 5.323 315 1.000 Custom type conversions for Money. <p>For Avro we were using Single Object Encoded format (binary format with schema reference) for both KotlinX Serialized and Java generated  (<code>SpecificRecordBase</code>) classes. This results in the identical representation (with same disk space consumption). </p> <p>You can find the detailed information about the test runs below.</p>"},{"location":"reference/disk_usage.html#xstream","title":"XStream","text":""},{"location":"reference/disk_usage.html#timings","title":"Timings","text":"<ol> <li>Time: 40690ms</li> <li>Time: 40438ms</li> <li>Time: 40162ms</li> <li>Time: 40310ms</li> <li>Time: 40308ms</li> </ol> <p>Resulting in an average of 40381ms.</p>"},{"location":"reference/disk_usage.html#disk-space-usage","title":"Disk space usage","text":"<pre><code>-rw-r--r-- 1 root root 1000000 Jul 12 22:46 00000000000000000000.events\n-rw-r--r-- 1 root root 1000000 Jul 12 22:47 00000000000000000746.events\n-rw-r--r-- 1 root root 1000000 Jul 12 22:47 00000000000000001492.events\n-rw-r--r-- 1 root root 1000000 Jul 12 22:48 00000000000000002238.events\n-rw-r--r-- 1 root root 1000000 Jul 12 22:48 00000000000000002984.events\n-rw-r--r-- 1 root root 1000000 Jul 12 22:48 00000000000000003730.events\n-rw-r--r-- 1 root root 1000000 Jul 12 22:49 00000000000000004476.events\n-rw-r--r-- 1 root root 1000000 Jul 12 22:49 00000000000000005222.events\n-rw-r--r-- 1 root root 1000000 Jul 12 22:50 00000000000000005968.events\n-rw-r--r-- 1 root root 1000000 Jul 12 22:50 00000000000000006714.events\n-rw-r--r-- 1 root root 1000000 Jul 12 22:50 00000000000000007460.events\n-rw-r--r-- 1 root root 1000000 Jul 12 22:51 00000000000000008206.events\n-rw-r--r-- 1 root root 1000000 Jul 12 22:51 00000000000000008952.events\n-rw-r--r-- 1 root root 1000000 Jul 12 22:51 00000000000000009698.events\n</code></pre>"},{"location":"reference/disk_usage.html#representation-in-the-event-store","title":"Representation in the event store","text":"<p>Just for reference, this is how it would look like if we are not using Moneta library, but just encode amount as Integer.</p> <pre><code>&lt;bankaccount.event.BankAccountCreated&gt;\n  &lt;accountId&gt;55eeba20-cdae-40fd-b418-b0f7b38cb676&lt;/accountId&gt;\n  &lt;initialBalance&gt;100&lt;/initialBalance&gt;\n&lt;/bankaccount.event.BankAccountCreated&gt;\n</code></pre> <p>BankAccountCreated: <pre><code>&lt;bankaccount.event.BankAccountCreated&gt;\n  &lt;accountId&gt;bda57038-0f52-46aa-ab1f-8ee4d0b81768&lt;/accountId&gt;\n  &lt;initialBalance&gt;\n    &lt;currency class=\"org.javamoney.moneta.spi.JDKCurrencyAdapter\"&gt;\n      &lt;baseCurrency&gt;EUR&lt;/baseCurrency&gt;\n      &lt;context&gt;\n        &lt;data&gt;\n          &lt;entry&gt;\n            &lt;string&gt;provider&lt;/string&gt;\n            &lt;string&gt;java.util.Currency&lt;/string&gt;\n          &lt;/entry&gt;\n        &lt;/data&gt;\n      &lt;/context&gt;\n    &lt;/currency&gt;\n    &lt;monetaryContext&gt;\n      &lt;data&gt;\n        &lt;entry&gt;\n          &lt;string&gt;amountType&lt;/string&gt;\n          &lt;java-class&gt;org.javamoney.moneta.Money&lt;/java-class&gt;\n        &lt;/entry&gt;\n        &lt;entry&gt;\n          &lt;string&gt;precision&lt;/string&gt;\n          &lt;int&gt;256&lt;/int&gt;\n        &lt;/entry&gt;\n        &lt;entry&gt;\n          &lt;string&gt;java.lang.Class&lt;/string&gt;\n          &lt;java-class&gt;org.javamoney.moneta.Money&lt;/java-class&gt;\n        &lt;/entry&gt;\n        &lt;entry&gt;\n          &lt;string&gt;java.math.RoundingMode&lt;/string&gt;\n          &lt;java.math.RoundingMode&gt;HALF_EVEN&lt;/java.math.RoundingMode&gt;\n        &lt;/entry&gt;\n      &lt;/data&gt;\n    &lt;/monetaryContext&gt;\n    &lt;number&gt;100&lt;/number&gt;\n  &lt;/initialBalance&gt;\n&lt;/bankaccount.event.BankAccountCreated&gt;\n</code></pre></p> <p>MoneyDeposited <pre><code>&lt;bankaccount.event.MoneyDeposited&gt;\n  &lt;accountId&gt;bda57038-0f52-46aa-ab1f-8ee4d0b81768&lt;/accountId&gt;\n  &lt;amount&gt;\n    &lt;currency class=\"org.javamoney.moneta.spi.JDKCurrencyAdapter\"&gt;\n      &lt;baseCurrency&gt;EUR&lt;/baseCurrency&gt;\n      &lt;context&gt;\n        &lt;data&gt;\n          &lt;entry&gt;\n            &lt;string&gt;provider&lt;/string&gt;\n            &lt;string&gt;java.util.Currency&lt;/string&gt;\n          &lt;/entry&gt;\n        &lt;/data&gt;\n      &lt;/context&gt;\n    &lt;/currency&gt;\n    &lt;monetaryContext&gt;\n      &lt;data&gt;\n        &lt;entry&gt;\n          &lt;string&gt;amountType&lt;/string&gt;\n          &lt;java-class&gt;org.javamoney.moneta.Money&lt;/java-class&gt;\n        &lt;/entry&gt;\n        &lt;entry&gt;\n          &lt;string&gt;precision&lt;/string&gt;\n          &lt;int&gt;256&lt;/int&gt;\n        &lt;/entry&gt;\n        &lt;entry&gt;\n          &lt;string&gt;java.lang.Class&lt;/string&gt;\n          &lt;java-class&gt;org.javamoney.moneta.Money&lt;/java-class&gt;\n        &lt;/entry&gt;\n        &lt;entry&gt;\n          &lt;string&gt;java.math.RoundingMode&lt;/string&gt;\n          &lt;java.math.RoundingMode&gt;HALF_EVEN&lt;/java.math.RoundingMode&gt;\n        &lt;/entry&gt;\n      &lt;/data&gt;\n    &lt;/monetaryContext&gt;\n    &lt;number&gt;19&lt;/number&gt;\n  &lt;/amount&gt;\n&lt;/bankaccount.event.MoneyDeposited&gt;\n</code></pre></p> <p>MoneyWithdrawn <pre><code>&lt;bankaccount.event.MoneyWithdrawn&gt;\n  &lt;accountId&gt;bda57038-0f52-46aa-ab1f-8ee4d0b81768&lt;/accountId&gt;\n  &lt;amount&gt;\n    &lt;currency class=\"org.javamoney.moneta.spi.JDKCurrencyAdapter\"&gt;\n      &lt;baseCurrency&gt;EUR&lt;/baseCurrency&gt;\n      &lt;context&gt;\n        &lt;data&gt;\n          &lt;entry&gt;\n            &lt;string&gt;provider&lt;/string&gt;\n            &lt;string&gt;java.util.Currency&lt;/string&gt;\n          &lt;/entry&gt;\n        &lt;/data&gt;\n      &lt;/context&gt;\n    &lt;/currency&gt;\n    &lt;monetaryContext&gt;\n      &lt;data&gt;\n        &lt;entry&gt;\n          &lt;string&gt;amountType&lt;/string&gt;\n          &lt;java-class&gt;org.javamoney.moneta.Money&lt;/java-class&gt;\n        &lt;/entry&gt;\n        &lt;entry&gt;\n          &lt;string&gt;precision&lt;/string&gt;\n          &lt;int&gt;256&lt;/int&gt;\n        &lt;/entry&gt;\n        &lt;entry&gt;\n          &lt;string&gt;java.lang.Class&lt;/string&gt;\n          &lt;java-class&gt;org.javamoney.moneta.Money&lt;/java-class&gt;\n        &lt;/entry&gt;\n        &lt;entry&gt;\n          &lt;string&gt;java.math.RoundingMode&lt;/string&gt;\n          &lt;java.math.RoundingMode&gt;HALF_EVEN&lt;/java.math.RoundingMode&gt;\n        &lt;/entry&gt;\n      &lt;/data&gt;\n    &lt;/monetaryContext&gt;\n    &lt;number&gt;9&lt;/number&gt;\n  &lt;/amount&gt;\n&lt;/bankaccount.event.MoneyWithdrawn&gt;\n</code></pre></p>"},{"location":"reference/disk_usage.html#jackson-json","title":"Jackson JSON","text":""},{"location":"reference/disk_usage.html#timings_1","title":"Timings","text":"<ol> <li>Time: 25297ms</li> <li>Time: 25351ms</li> <li>Time: 25070ms</li> <li>Time: 25425ms</li> <li>Time: 26140ms</li> </ol> <p>Resulting in an average of 25456ms.</p>"},{"location":"reference/disk_usage.html#disk-usage","title":"Disk usage","text":"<pre><code>-rw-r--r-- 1 root root 1000000 Jul 12 22:25 00000000000000000000.events\n-rw-r--r-- 1 root root 1000000 Jul 12 22:26 00000000000000002817.events\n-rw-r--r-- 1 root root 1000000 Jul 12 22:29 00000000000000005634.events\n-rw-r--r-- 1 root root 1000000 Jul 12 22:29 00000000000000008451.events\n</code></pre> <p>In order to be able to serialize Money type, an additional <code>jackson-datatype-money</code> library was required and the corresponding module needed to be registered. </p> <p>BankAccountCreated: <pre><code>{\"accountId\":\"702bdae0-d507-4664-8ee8-d8d7e3ff5778\",\"initialBalance\":{\"amount\":100.00,\"currency\":\"EUR\"}}\n</code></pre> MoneyDeposited: <pre><code>{\"accountId\":\"702bdae0-d507-4664-8ee8-d8d7e3ff5778\",\"amount\":{\"amount\":19.00,\"currency\":\"EUR\"}}\n</code></pre> MoneyWithdrawn: <pre><code>{\"accountId\":\"702bdae0-d507-4664-8ee8-d8d7e3ff5778\",\"amount\":{\"amount\":10.00,\"currency\":\"EUR\"}}\n</code></pre></p>"},{"location":"reference/disk_usage.html#jackson-cbor","title":"Jackson CBOR","text":""},{"location":"reference/disk_usage.html#timings_2","title":"Timings","text":"<ol> <li>Time: 26427ms</li> <li>Time: 25224ms</li> <li>Time: 25002ms</li> <li>Time: 25120ms</li> <li>Time: 25343ms</li> </ol> <p>Resulting in an average of 25423ms.</p>"},{"location":"reference/disk_usage.html#disk-usage_1","title":"Disk usage","text":"<p><pre><code>-rw-r--r-- 1 root root 1000000 Jul 12 22:13 00000000000000000000.events\n-rw-r--r-- 1 root root 1000000 Jul 12 22:17 00000000000000002904.events\n-rw-r--r-- 1 root root 1000000 Jul 12 22:18 00000000000000005808.events\n-rw-r--r-- 1 root root 1000000 Jul 12 22:18 00000000000000008712.events\n</code></pre> In order to be able to serialize Money type, an additional <code>jackson-datatype-money</code> library was required and the corresponding module needed to be registered.</p> <p>BankAccountCreated <pre><code>\ufffdiaccountIdx$9b4b8c26-d16f-4ce3-b5ab-62beb9b711d1ninitialBalance\ufffdfamount\u0102!\u0019'\u0010hcurrencycEUR\ufffd\ufffd\n</code></pre></p> <p>MoneyDeposited <pre><code>\ufffdiaccountIdx$9b4b8c26-d16f-4ce3-b5ab-62beb9b711d1famount\ufffdfamount\u0102!\u0019\ufffdhcurrencycEUR\ufffd\ufffd\n</code></pre></p> <p>MoneyWithdrawn <pre><code>\ufffdiaccountIdx$9b4b8c26-d16f-4ce3-b5ab-62beb9b711d1famount\ufffdfamount\u0102!\u0019\ufffdhcurrencycEUR\ufffd\ufffd\n</code></pre></p>"},{"location":"reference/disk_usage.html#avro-with-java-generated-classes","title":"Avro with Java generated classes","text":""},{"location":"reference/disk_usage.html#timings_3","title":"Timings","text":"<ol> <li>Time: 135915ms</li> <li>Time: 136152ms</li> <li>Time: 136598ms</li> <li>Time: 135525ms</li> <li>Time: 136245ms</li> </ol> <p>Resulting in an average of 136087ms.</p>"},{"location":"reference/disk_usage.html#disk-usage_2","title":"Disk usage","text":"<pre><code>-rw-r--r-- 1 root root 1000000 Jul 12 23:37 00000000000000000000.events\n-rw-r--r-- 1 root root 1000000 Jul 12 23:42 00000000000000003165.events\n-rw-r--r-- 1 root root 1000000 Jul 12 23:46 00000000000000006330.events\n-rw-r--r-- 1 root root 1000000 Jul 12 23:47 00000000000000009495.events\n</code></pre> <p>BankAccountCreated <pre><code>\ufffd\u0001K\ufffd\ufffdX{lH27cd7b01-1515-4d4f-998e-4df0e08e44a7\u0014100,00 EUR\n</code></pre></p> <p>MoneyDeposited <pre><code>\ufffd\u0001mN;\ufffdZ\ufffd\u04e6H27cd7b01-1515-4d4f-998e-4df0e08e44a7\u001212,00 EUR\n</code></pre></p> <p>MoneyWithdrawn <pre><code>\ufffd\u0001VFtDj\ufffd\u0014xH27cd7b01-1515-4d4f-998e-4df0e08e44a7\u00106,00 EUR\n</code></pre></p>"},{"location":"reference/disk_usage.html#avro-with-kotlinx-serialized-classes","title":"Avro with KotlinX serialized classes","text":""},{"location":"reference/disk_usage.html#timings_4","title":"Timings","text":"<ol> <li>Time: 82828ms</li> <li>Time: 81669ms</li> <li>Time: 81324ms</li> <li>Time: 82468ms</li> <li>Time: 82523ms</li> </ol> <p>Resulting in an average of 82162 ms.</p>"},{"location":"reference/disk_usage.html#disk-usage_3","title":"Disk usage","text":"<pre><code>-rw-r--r-- 1 root root 1000000 Jul 12 21:59 00000000000000000000.events\n-rw-r--r-- 1 root root 1000000 Jul 12 22:02 00000000000000003165.events\n-rw-r--r-- 1 root root 1000000 Jul 12 22:04 00000000000000006330.events\n-rw-r--r-- 1 root root 1000000 Jul 12 22:05 00000000000000009495.events\n</code></pre> <p>BankAccountCreated <pre><code>\ufffd\u0001K\ufffd\ufffdX{lH27cd7b01-1515-4d4f-998e-4df0e08e44a7\u0014100,00 EUR\n</code></pre></p> <p>MoneyDeposited <pre><code>\ufffd\u0001mN;\ufffdZ\ufffd\u04e6H27cd7b01-1515-4d4f-998e-4df0e08e44a7\u001212,00 EUR\n</code></pre></p> <p>MoneyWithdrawn <pre><code>\ufffd\u0001VFtDj\ufffd\u0014xH27cd7b01-1515-4d4f-998e-4df0e08e44a7\u00106,00 EUR\n</code></pre></p>"},{"location":"reference/disk_usage.html#how-to-compare-anatomy-of-the-test-application","title":"How to compare / anatomy of the test application","text":"<p>In order to make it comparable we had to use two slightly different applications. The XML, JSON and CBOR applications were using Kotlin  Data classes for events. Those have been serialized by the corresponding Axon Serializer and sent to Axon Server. For the Avro stack we conducted two tests: one using KotlinX Avro Serialization and another using classes created by Avro Java generator. The latter generator  has a particular form of how classes look like (static builder, internal fields not reflecting the attributes) and therefor we created two  versions of event classes.</p> <p>If you look into <code>lib/</code> folder of the library you will find the following modules:</p> <ul> <li><code>fixture-events-manual</code>: hand-written Kotlin Data classes with KotlinX <code>Serializable</code> annotation, having the same signature as generated by Apache Avro Java generator</li> <li><code>fixture-events-avro-java</code>: Avro specifications, used for the generation of Java classes by Apache Avro Java Maven plugin</li> <li><code>fixture-application</code>: banking application classes (aggregate, commands, projection)</li> <li><code>comparison-tests</code>: comparison tests</li> </ul>"},{"location":"reference/disk_usage.html#run-tests-on-your-own","title":"Run tests on your own","text":"<p>Every start of application will produce one run (2010 events). In our tests we re-started the application five times. </p> <ul> <li>XStream: start <code>bank.ComparisonApplication</code> with Spring profile <code>xstream</code></li> <li>Jackson JSON: start <code>bank.ComparisonApplication</code> with Spring profile <code>jackson</code></li> <li>Jackson CBOR: start <code>bank.ComparisonApplication</code> with Spring profile <code>cbor</code></li> <li>Avro KotlinX Serialization: start <code>bank.ComparisonApplication</code> with Spring profile <code>avro</code></li> <li>Avro Java generated classes: activate Maven profile <code>avro-java</code>, rebuild the application and start <code>bank.ComparisonApplication</code> with Spring profile <code>avro</code> </li> </ul>"},{"location":"reference/disk_usage.html#additional-test-run","title":"Additional Test run","text":"<p>Macbook Pro 2021, Apple M1  Pro, 32GB. The overall performance is better, but the relative time factors are almost constant.</p> Format Average run (ms) Time Factor Average Event size (bytes) Size Factor Notes XStream 18142 1.703 21.3 4.253 No additional configuration. Jackson JSON 10714 1.006 15.3 1.227 Custom Object Mapper settings for Money. Jackson CBOR 10651 1.000 15.4 1.092 Custom Object Mapper settings for Money. Avro KotlinX 37087 3.482 15.4 (du -s / #events) 1.000 Custom type conversions for Money. Avro Java 56570 5.311 15.4 1.000 Custom type conversions for Money."}]}